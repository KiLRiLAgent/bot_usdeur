import os
import datetime
import requests
import sqlite3
import pytz
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, BaseFilter, CallbackQueryHandler
import random
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger()

load_dotenv()

DB_NAME = 'users.db'

def create_database():
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute('CREATE TABLE IF NOT EXISTS users (chat_id INTEGER PRIMARY KEY, special_message TEXT)')

def set_user_name(chat_id: int, special_message: str):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO users (chat_id, special_message) VALUES (?, ?)", (chat_id, special_message))
        conn.commit()

def get_random_pet_name(chat_id):
    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT special_message FROM users WHERE chat_id=?", (chat_id,))
        special_message = cursor.fetchone()

    if special_message and special_message[0]:
        return special_message[0]
    else:
        pet_names = ["–∫–æ—Ç–∏–∫", "–∑–∞–π—á–∏–∫", "–º–µ–¥–≤–µ–∂–æ–Ω–æ–∫", "—Å–ª–æ–Ω–µ–Ω–æ–∫", "–ª–µ–æ–ø–∞—Ä–¥–∏–∫", "–ª–∏—Å–µ–Ω–æ–∫", "—Ç–∏–≥—Ä–µ–Ω–æ–∫"]
        return random.choice(pet_names)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

previous_rates = {"usd": None, "eur": None}

create_database()

def get_exchange_rates():
    response = requests.get("https://www.floatrates.com/daily/usd.json")
    data = response.json()
    usd_rate = data["rub"]["rate"]

    response = requests.get("https://www.floatrates.com/daily/eur.json")
    data = response.json()
    eur_rate = data["rub"]["rate"]

    return usd_rate, eur_rate

def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    set_user_name(chat_id, None)
    print(f"User chat_id: {chat_id}")
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∏ –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ 8 —á–∞—Å–æ–≤ –ø–æ –ú–°–ö!üòä\n–ö–æ–º–∞–Ω–¥–∞:\n/set_name –í–∞—à–µ_–ò–º—è - –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –ø—Å–µ–≤–¥–æ–Ω–∏–º")

    send_button(update, context)

def send_exchange_rates(context: CallbackContext):
    logger.info("Sending exchange rates...")
    global previous_rates
    usd_rate, eur_rate = get_exchange_rates()
    formatted_usd_rate = "{:.1f}".format(usd_rate)
    formatted_eur_rate = "{:.1f}".format(eur_rate)

    usd_message = f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é: {formatted_usd_rate}\n"
    eur_message = f"–ö—É—Ä—Å –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é: {formatted_eur_rate}\n"

    if previous_rates["usd"]:
        usd_diff = usd_rate - previous_rates["usd"]
        if usd_diff > 0:
            usd_message += f" –û–≥–æ, –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –≤—ã—Ä–æ—Å –Ω–∞ {usd_diff:.1f} —Ä—É–±–ª—è! –ß—Ç–æ –∂–µ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?"
        elif usd_diff < 0:
            usd_message += f" –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —É–ø–∞–ª –Ω–∞ {-usd_diff:.1f} —Ä—É–±–ª—è. –î–µ—Ä–∂–∏–º –∫—É–ª–∞—á–∫–∏, –±—Ä–∞—Ç—å—è!"

    if previous_rates["eur"]:
        eur_diff = eur_rate - previous_rates["eur"]
        if eur_diff > 0:
            eur_message += f"–û–≥–æ, –∫—É—Ä—Å –µ–≤—Ä–æ –≤—ã—Ä–æ—Å –Ω–∞ {eur_diff:.1f} —Ä—É–±–ª—è! –ß—Ç–æ –∂–µ –±—É–¥–µ—Ç –¥–∞–ª—å—à–µ?"
        elif eur_diff < 0:
            eur_message += f"–ö—É—Ä—Å –µ–≤—Ä–æ —É–ø–∞–ª –Ω–∞ {-eur_diff:.1f} —Ä—É–±–ª—è. –î–µ—Ä–∂–∏–º –∫—É–ª–∞—á–∫–∏, –±—Ä–∞—Ç—å—è!"

    previous_rates["usd"] = usd_rate
    previous_rates["eur"] = eur_rate

    with sqlite3.connect(DB_NAME) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT chat_id FROM users")
        chat_ids = cursor.fetchall()

    for chat_id_tuple in chat_ids:
        chat_id = chat_id_tuple[0]
        context.bot.send_message(chat_id=chat_id, text=f"{usd_message}\n{eur_message}")

def get_now(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    usd_rate, eur_rate = get_exchange_rates()
    formatted_usd_rate = "{:.1f}".format(usd_rate)
    formatted_eur_rate = "{:.1f}".format(eur_rate)
    
    random_pet_name = get_random_pet_name(chat_id)
    update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ –∫ —Ä—É–±–ª—é: {formatted_usd_rate}\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å –µ–≤—Ä–æ –∫ —Ä—É–±–ª—é: {formatted_eur_rate}\n–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, {random_pet_name}!")

def set_name(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    special_message = ' '.join(context.args)
    
    if special_message:
        set_user_name(chat_id, special_message)
        update.message.reply_text(f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±—è {special_message}!")
    else:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_name —Å –≤–∞—à–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–æ–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")

def send_button(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    keyboard = [
        [KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å–µ–π—á–∞—Å")],
    ]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    context.bot.send_message(chat_id=chat_id, text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å:", reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data == "getnow":
        chat_id = query.message.chat_id
        get_now(update, context)
        send_button(update, context)

def get_first_run_time():
    msk_tz = pytz.timezone('Europe/Moscow')
    now_utc = datetime.datetime.utcnow().replace(tzinfo=pytz.utc)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
    next_run_time_msk = now_utc.astimezone(msk_tz).replace(hour=8, minute=0, second=0, microsecond=0)  # –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–ø—É—Å–∫–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ú–°–ö

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å, –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
    if now_utc >= next_run_time_msk.astimezone(pytz.utc):
        next_run_time_msk += datetime.timedelta(days=1)

    next_run_time_utc = next_run_time_msk.astimezone(pytz.utc)
    delay_seconds = (next_run_time_utc - now_utc).total_seconds()  # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    return delay_seconds

class FilterGetCourseNow(BaseFilter):
    def filter(self, message):
        return '–ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å–µ–π—á–∞—Å' in message.text

filter_get_course_now = FilterGetCourseNow()

def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)

    dp = updater.dispatcher

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("getnow", get_now))
    dp.add_handler(CommandHandler("set_name", set_name, pass_args=True))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.add_handler(MessageHandler(Filters.text & (~Filters.command), get_now))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
    dp.add_handler(CallbackQueryHandler(button_handler))

    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏

    job_queue = updater.job_queue
    delay_seconds = get_first_run_time()
    logger.info(f"Scheduled to run in {delay_seconds} seconds")
    job_queue.run_repeating(send_exchange_rates, interval=datetime.timedelta(days=1), first=delay_seconds)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()